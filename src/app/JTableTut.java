/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app;

import com.opencsv.CSVReader;
import java.awt.CardLayout;
import java.awt.List;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;


/**
 *
 * @author Danial
 */
public class JTableTut extends javax.swing.JFrame {

    private File openedFile; 
    private String[] header;
    private Vector<Vector<String>> data = new Vector<>(); 
    private Vector headerVec = new Vector();
    private boolean loaded = false; 
    private File outputFile; 
    
    /**
     * Creates new form JTableTut
     */
    public JTableTut() {        
        initComponents();
       
    }

    
    
    
    
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileExplorer = new javax.swing.JFileChooser();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        sourceTab = new javax.swing.JPanel();
        fileNameTextField = new javax.swing.JTextField();
        browseFileExplorerButton = new javax.swing.JButton();
        selectFile = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        csvTable = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int column) {
                return false;
            };
        };
        jScrollPane2 = new javax.swing.JScrollPane();
        workingTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        columnList = new javax.swing.JList<>();
        getColumns = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        percentageTextField = new javax.swing.JTextField();
        percentageButton = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        rowNums = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        rowNums2 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        colNums = new javax.swing.JTextField();
        algorithmTab = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        supervisedTab = new javax.swing.JPanel();
        supervisedSelector = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        supervisedComboBox = new javax.swing.JComboBox<>();
        selectSupervisedCardButton = new javax.swing.JButton();
        supervisedCardConfig = new javax.swing.JPanel();
        defaultSupervisedConfig = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        decisionTreeConfig = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        numClassesTextField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        maxDepthTextField = new javax.swing.JTextField();
        generateDecisionTreeButton = new javax.swing.JButton();
        decisionTreeOutputFileText = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        maxBinsTextField = new javax.swing.JTextField();
        impurityComboBox = new javax.swing.JComboBox<>();
        logisticRegressionConfig = new javax.swing.JPanel();
        naiveBayesConfig1 = new javax.swing.JPanel();
        bayesLabel1 = new javax.swing.JLabel();
        logisticRegressionLabe1 = new javax.swing.JLabel();
        outputLabel1 = new javax.swing.JLabel();
        logisticRegressionTextField1 = new javax.swing.JTextField();
        logisticRegressionOutputFileText = new javax.swing.JTextField();
        generateLogisticRegression = new javax.swing.JButton();
        logisticRegressionLabe2 = new javax.swing.JLabel();
        logisticRegressionTextField2 = new javax.swing.JTextField();
        naiveBayesConfig = new javax.swing.JPanel();
        bayesLabel = new javax.swing.JLabel();
        lambdaLabel = new javax.swing.JLabel();
        outputLabel = new javax.swing.JLabel();
        lambdaTextField = new javax.swing.JTextField();
        bayesOutputFileText = new javax.swing.JTextField();
        generateBayesButton = new javax.swing.JButton();
        unsupervisedTab = new javax.swing.JPanel();
        unsupervisedCardConfig = new javax.swing.JPanel();
        defaultUnsupervisedConfig = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        kmeansConfig = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        numClustersTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        numIterationsTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        outputFileTextField = new javax.swing.JTextField();
        generateKMeansButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        gaussianConfig = new javax.swing.JPanel();
        jLabelGaussian2 = new javax.swing.JLabel();
        numClustersGaussian = new javax.swing.JTextField();
        jLabelGaussian4 = new javax.swing.JLabel();
        jLabelGaussian1 = new javax.swing.JLabel();
        jLabelGaussian3 = new javax.swing.JLabel();
        outputFileTextFieldGaussian = new javax.swing.JTextField();
        generateButtonGaussian = new javax.swing.JButton();
        unsupervisedSelector = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        unsupervisedComboBox = new javax.swing.JComboBox<>();
        selectUnsupervisedCardButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        codeTab = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        generatedScalaTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileNameTextField.setEditable(false);
        fileNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileNameTextFieldActionPerformed(evt);
            }
        });

        browseFileExplorerButton.setText("Browse");
        browseFileExplorerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseFileExplorerButtonActionPerformed(evt);
            }
        });

        selectFile.setText("Select");
        selectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFileActionPerformed(evt);
            }
        });

        csvTable.setModel(new javax.swing.table.DefaultTableModel(
            data,
            headerVec
        ));
        csvTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane3.setViewportView(csvTable);

        workingTable.setModel(new javax.swing.table.DefaultTableModel(
            data,
            headerVec
        ));
        jScrollPane2.setViewportView(workingTable);

        jScrollPane4.setViewportView(columnList);

        getColumns.setText("Get Columns");
        getColumns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getColumnsActionPerformed(evt);
            }
        });

        jLabel4.setText("Select Columns:");

        jLabel15.setText("Percentage of Dataset to Load: ");

        percentageTextField.setText("100");

        percentageButton.setText("Apply");
        percentageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                percentageButtonActionPerformed(evt);
            }
        });

        jLabel16.setText("Number of Rows:");

        jLabel17.setText("Number of Rows:");

        jLabel19.setText("Columns Selected:");

        javax.swing.GroupLayout sourceTabLayout = new javax.swing.GroupLayout(sourceTab);
        sourceTab.setLayout(sourceTabLayout);
        sourceTabLayout.setHorizontalGroup(
            sourceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sourceTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sourceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(sourceTabLayout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rowNums, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel15)
                        .addGap(18, 18, 18)
                        .addComponent(percentageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(percentageButton))
                    .addGroup(sourceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(sourceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(sourceTabLayout.createSequentialGroup()
                                .addComponent(browseFileExplorerButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 583, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(sourceTabLayout.createSequentialGroup()
                                .addGap(677, 677, 677)
                                .addComponent(selectFile)))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sourceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(getColumns)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(sourceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sourceTabLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 711, Short.MAX_VALUE)
                        .addGap(23, 23, 23))
                    .addGroup(sourceTabLayout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rowNums2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(colNums, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        sourceTabLayout.setVerticalGroup(
            sourceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sourceTabLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(sourceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseFileExplorerButton)
                    .addComponent(selectFile))
                .addGap(18, 18, 18)
                .addGroup(sourceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sourceTabLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(getColumns))
                    .addGroup(sourceTabLayout.createSequentialGroup()
                        .addGroup(sourceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 571, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(sourceTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(rowNums, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(percentageButton)
                            .addComponent(percentageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)
                            .addComponent(jLabel17)
                            .addComponent(rowNums2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19)
                            .addComponent(colNums, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Source and Datasets", sourceTab);

        jLabel10.setText("Select an algorithm:");

        supervisedComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Decision Tree", "Naive Bayes", "Logistic Regression"}));

        selectSupervisedCardButton.setText("Select");
        selectSupervisedCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectSupervisedCardButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout supervisedSelectorLayout = new javax.swing.GroupLayout(supervisedSelector);
        supervisedSelector.setLayout(supervisedSelectorLayout);
        supervisedSelectorLayout.setHorizontalGroup(
            supervisedSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(supervisedSelectorLayout.createSequentialGroup()
                .addGap(280, 280, 280)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(supervisedComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(selectSupervisedCardButton)
                .addContainerGap(45, Short.MAX_VALUE))
        );
        supervisedSelectorLayout.setVerticalGroup(
            supervisedSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(supervisedSelectorLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(supervisedSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(supervisedComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(selectSupervisedCardButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        supervisedCardConfig.setLayout(new java.awt.CardLayout());

        jLabel11.setText("Select an algorithm.");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel12.setText("Supervised Learning ");

        javax.swing.GroupLayout defaultSupervisedConfigLayout = new javax.swing.GroupLayout(defaultSupervisedConfig);
        defaultSupervisedConfig.setLayout(defaultSupervisedConfigLayout);
        defaultSupervisedConfigLayout.setHorizontalGroup(
            defaultSupervisedConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultSupervisedConfigLayout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addGroup(defaultSupervisedConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addContainerGap(546, Short.MAX_VALUE))
        );
        defaultSupervisedConfigLayout.setVerticalGroup(
            defaultSupervisedConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultSupervisedConfigLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addContainerGap(618, Short.MAX_VALUE))
        );

        supervisedCardConfig.add(defaultSupervisedConfig, "card2");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel13.setText("Decision Tree");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setText("Configurations");

        jLabel18.setText("Number of Classes:");

        jLabel20.setText("Impurity:");

        jLabel21.setText("Max Depth: ");

        generateDecisionTreeButton.setText("Generate");
        generateDecisionTreeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateDecisionTreeButtonActionPerformed(evt);
            }
        });

        jLabel22.setText("Max Bins:");

        jLabel23.setText("Output File: ");

        impurityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "gini", "variance", "entropy"}));

        javax.swing.GroupLayout decisionTreeConfigLayout = new javax.swing.GroupLayout(decisionTreeConfig);
        decisionTreeConfig.setLayout(decisionTreeConfigLayout);
        decisionTreeConfigLayout.setHorizontalGroup(
            decisionTreeConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(decisionTreeConfigLayout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(decisionTreeConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(decisionTreeConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(generateDecisionTreeButton)
                        .addGroup(decisionTreeConfigLayout.createSequentialGroup()
                            .addGroup(decisionTreeConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel20)
                                .addComponent(jLabel22)
                                .addComponent(jLabel21)
                                .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(decisionTreeConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(decisionTreeConfigLayout.createSequentialGroup()
                                    .addGap(42, 42, 42)
                                    .addGroup(decisionTreeConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(maxDepthTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                        .addComponent(numClassesTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                        .addComponent(impurityComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, decisionTreeConfigLayout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(decisionTreeConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(decisionTreeOutputFileText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(maxBinsTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addContainerGap(391, Short.MAX_VALUE))
        );
        decisionTreeConfigLayout.setVerticalGroup(
            decisionTreeConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(decisionTreeConfigLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel13)
                .addGap(55, 55, 55)
                .addComponent(jLabel14)
                .addGap(18, 18, 18)
                .addGroup(decisionTreeConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numClassesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addGap(18, 18, 18)
                .addGroup(decisionTreeConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(impurityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(decisionTreeConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(maxDepthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(decisionTreeConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(maxBinsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(decisionTreeConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(decisionTreeOutputFileText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(generateDecisionTreeButton)
                .addContainerGap(327, Short.MAX_VALUE))
        );

        supervisedCardConfig.add(decisionTreeConfig, "card3");

        bayesLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        bayesLabel1.setText("Logistic Regression");

        logisticRegressionLabe1.setText("Number of Classes:");

        outputLabel1.setText("Output File:");

        generateLogisticRegression.setText("Generate");
        generateLogisticRegression.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateLogisticRegressionActionPerformed(evt);
            }
        });

        logisticRegressionLabe2.setText("Split:");

        javax.swing.GroupLayout naiveBayesConfig1Layout = new javax.swing.GroupLayout(naiveBayesConfig1);
        naiveBayesConfig1.setLayout(naiveBayesConfig1Layout);
        naiveBayesConfig1Layout.setHorizontalGroup(
            naiveBayesConfig1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(naiveBayesConfig1Layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(naiveBayesConfig1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bayesLabel1)
                    .addGroup(naiveBayesConfig1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(generateLogisticRegression)
                        .addGroup(naiveBayesConfig1Layout.createSequentialGroup()
                            .addGroup(naiveBayesConfig1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, naiveBayesConfig1Layout.createSequentialGroup()
                                    .addComponent(logisticRegressionLabe1)
                                    .addGap(27, 27, 27))
                                .addGroup(naiveBayesConfig1Layout.createSequentialGroup()
                                    .addGroup(naiveBayesConfig1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(logisticRegressionLabe2)
                                        .addComponent(outputLabel1))
                                    .addGap(72, 72, 72)))
                            .addGroup(naiveBayesConfig1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(logisticRegressionTextField2)
                                .addComponent(logisticRegressionTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                .addComponent(logisticRegressionOutputFileText)))))
                .addContainerGap(472, Short.MAX_VALUE))
        );
        naiveBayesConfig1Layout.setVerticalGroup(
            naiveBayesConfig1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(naiveBayesConfig1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(bayesLabel1)
                .addGap(36, 36, 36)
                .addGroup(naiveBayesConfig1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logisticRegressionLabe1)
                    .addComponent(logisticRegressionTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(naiveBayesConfig1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logisticRegressionLabe2)
                    .addComponent(logisticRegressionTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(naiveBayesConfig1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logisticRegressionOutputFileText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputLabel1))
                .addGap(18, 18, 18)
                .addComponent(generateLogisticRegression)
                .addContainerGap(463, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout logisticRegressionConfigLayout = new javax.swing.GroupLayout(logisticRegressionConfig);
        logisticRegressionConfig.setLayout(logisticRegressionConfigLayout);
        logisticRegressionConfigLayout.setHorizontalGroup(
            logisticRegressionConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 873, Short.MAX_VALUE)
            .addGroup(logisticRegressionConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(logisticRegressionConfigLayout.createSequentialGroup()
                    .addGap(0, 18, Short.MAX_VALUE)
                    .addComponent(naiveBayesConfig1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 19, Short.MAX_VALUE)))
        );
        logisticRegressionConfigLayout.setVerticalGroup(
            logisticRegressionConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 697, Short.MAX_VALUE)
            .addGroup(logisticRegressionConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(logisticRegressionConfigLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(naiveBayesConfig1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        supervisedCardConfig.add(logisticRegressionConfig, "card5");

        bayesLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        bayesLabel.setText("Naive Bayes");

        lambdaLabel.setText("Set Lambda (Default 1.0):");

        outputLabel.setText("Output File:");

        lambdaTextField.setText("1.0");

        generateBayesButton.setText("Generate");
        generateBayesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateBayesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout naiveBayesConfigLayout = new javax.swing.GroupLayout(naiveBayesConfig);
        naiveBayesConfig.setLayout(naiveBayesConfigLayout);
        naiveBayesConfigLayout.setHorizontalGroup(
            naiveBayesConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(naiveBayesConfigLayout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(naiveBayesConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bayesLabel)
                    .addGroup(naiveBayesConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(generateBayesButton)
                        .addGroup(naiveBayesConfigLayout.createSequentialGroup()
                            .addGroup(naiveBayesConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lambdaLabel)
                                .addComponent(outputLabel))
                            .addGap(27, 27, 27)
                            .addGroup(naiveBayesConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lambdaTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                .addComponent(bayesOutputFileText)))))
                .addContainerGap(472, Short.MAX_VALUE))
        );
        naiveBayesConfigLayout.setVerticalGroup(
            naiveBayesConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(naiveBayesConfigLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(bayesLabel)
                .addGap(36, 36, 36)
                .addGroup(naiveBayesConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lambdaLabel)
                    .addComponent(lambdaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(naiveBayesConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputLabel)
                    .addComponent(bayesOutputFileText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(generateBayesButton)
                .addContainerGap(477, Short.MAX_VALUE))
        );

        supervisedCardConfig.add(naiveBayesConfig, "card4");

        javax.swing.GroupLayout supervisedTabLayout = new javax.swing.GroupLayout(supervisedTab);
        supervisedTab.setLayout(supervisedTabLayout);
        supervisedTabLayout.setHorizontalGroup(
            supervisedTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(supervisedTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(supervisedSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(125, 125, 125)
                .addComponent(supervisedCardConfig, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        supervisedTabLayout.setVerticalGroup(
            supervisedTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(supervisedSelector, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(supervisedCardConfig, javax.swing.GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Superivsed Learning", supervisedTab);

        unsupervisedCardConfig.setLayout(new java.awt.CardLayout());

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Unsupervised Learning ");

        jLabel9.setText("Select an algorithm.");

        javax.swing.GroupLayout defaultUnsupervisedConfigLayout = new javax.swing.GroupLayout(defaultUnsupervisedConfig);
        defaultUnsupervisedConfig.setLayout(defaultUnsupervisedConfigLayout);
        defaultUnsupervisedConfigLayout.setHorizontalGroup(
            defaultUnsupervisedConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultUnsupervisedConfigLayout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addGroup(defaultUnsupervisedConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel7))
                .addContainerGap(521, Short.MAX_VALUE))
        );
        defaultUnsupervisedConfigLayout.setVerticalGroup(
            defaultUnsupervisedConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultUnsupervisedConfigLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addContainerGap(591, Short.MAX_VALUE))
        );

        unsupervisedCardConfig.add(defaultUnsupervisedConfig, "card3");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("K-Means");

        jLabel2.setText("Clusters:");

        jLabel3.setText("Iterations:");

        jLabel5.setText("Output File:");

        generateKMeansButton.setText("Generate");
        generateKMeansButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateKMeansButtonActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Configurations");

        javax.swing.GroupLayout kmeansConfigLayout = new javax.swing.GroupLayout(kmeansConfig);
        kmeansConfig.setLayout(kmeansConfigLayout);
        kmeansConfigLayout.setHorizontalGroup(
            kmeansConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kmeansConfigLayout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(kmeansConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(generateKMeansButton)
                    .addGroup(kmeansConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1)
                        .addComponent(jLabel8)
                        .addGroup(kmeansConfigLayout.createSequentialGroup()
                            .addGroup(kmeansConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3)
                                .addComponent(jLabel5))
                            .addGap(42, 42, 42)
                            .addGroup(kmeansConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(outputFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(numIterationsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(numClustersTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 473, Short.MAX_VALUE))
        );
        kmeansConfigLayout.setVerticalGroup(
            kmeansConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kmeansConfigLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addGap(55, 55, 55)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addGroup(kmeansConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numClustersTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(kmeansConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numIterationsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(kmeansConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(outputFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(generateKMeansButton)
                .addContainerGap(410, Short.MAX_VALUE))
        );

        unsupervisedCardConfig.add(kmeansConfig, "card2");

        jLabelGaussian2.setText("Clusters:");

        jLabelGaussian4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelGaussian4.setText("Gaussian Mixture");

        jLabelGaussian1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelGaussian1.setText("Configurations");

        jLabelGaussian3.setText("Output File:");

        generateButtonGaussian.setText("Generate");
        generateButtonGaussian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonGaussianActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout gaussianConfigLayout = new javax.swing.GroupLayout(gaussianConfig);
        gaussianConfig.setLayout(gaussianConfigLayout);
        gaussianConfigLayout.setHorizontalGroup(
            gaussianConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gaussianConfigLayout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(gaussianConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelGaussian4)
                    .addComponent(jLabelGaussian1)
                    .addGroup(gaussianConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(generateButtonGaussian)
                        .addGroup(gaussianConfigLayout.createSequentialGroup()
                            .addGroup(gaussianConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabelGaussian2)
                                .addComponent(jLabelGaussian3))
                            .addGap(42, 42, 42)
                            .addGroup(gaussianConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(outputFileTextFieldGaussian, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(numClustersGaussian, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 473, Short.MAX_VALUE))
        );
        gaussianConfigLayout.setVerticalGroup(
            gaussianConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gaussianConfigLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabelGaussian4)
                .addGap(55, 55, 55)
                .addComponent(jLabelGaussian1)
                .addGap(18, 18, 18)
                .addGroup(gaussianConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numClustersGaussian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelGaussian2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(gaussianConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelGaussian3)
                    .addComponent(outputFileTextFieldGaussian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(generateButtonGaussian)
                .addContainerGap(460, Short.MAX_VALUE))
        );

        unsupervisedCardConfig.add(gaussianConfig, "card4");

        jLabel6.setText("Select an algorithm:");

        unsupervisedComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "K-Means", "Gaussian Mixutre"}));

        selectUnsupervisedCardButton.setText("Select");
        selectUnsupervisedCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectUnsupervisedCardButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout unsupervisedSelectorLayout = new javax.swing.GroupLayout(unsupervisedSelector);
        unsupervisedSelector.setLayout(unsupervisedSelectorLayout);
        unsupervisedSelectorLayout.setHorizontalGroup(
            unsupervisedSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(unsupervisedSelectorLayout.createSequentialGroup()
                .addContainerGap(280, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(unsupervisedComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(selectUnsupervisedCardButton)
                .addGap(45, 45, 45))
        );
        unsupervisedSelectorLayout.setVerticalGroup(
            unsupervisedSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(unsupervisedSelectorLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(unsupervisedSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unsupervisedComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(selectUnsupervisedCardButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout unsupervisedTabLayout = new javax.swing.GroupLayout(unsupervisedTab);
        unsupervisedTab.setLayout(unsupervisedTabLayout);
        unsupervisedTabLayout.setHorizontalGroup(
            unsupervisedTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(unsupervisedTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(unsupervisedSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(125, 125, 125)
                .addComponent(unsupervisedCardConfig, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        unsupervisedTabLayout.setVerticalGroup(
            unsupervisedTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(unsupervisedSelector, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(unsupervisedCardConfig, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Unsupervised Learning", unsupervisedTab);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1626, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 697, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Other", jPanel1);

        javax.swing.GroupLayout algorithmTabLayout = new javax.swing.GroupLayout(algorithmTab);
        algorithmTab.setLayout(algorithmTabLayout);
        algorithmTabLayout.setHorizontalGroup(
            algorithmTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        algorithmTabLayout.setVerticalGroup(
            algorithmTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jTabbedPane1.addTab("Algorithm Selection and Configurations", algorithmTab);

        generatedScalaTextArea.setEditable(false);
        generatedScalaTextArea.setColumns(20);
        generatedScalaTextArea.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        generatedScalaTextArea.setRows(5);
        jScrollPane1.setViewportView(generatedScalaTextArea);

        javax.swing.GroupLayout codeTabLayout = new javax.swing.GroupLayout(codeTab);
        codeTab.setLayout(codeTabLayout);
        codeTabLayout.setHorizontalGroup(
            codeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, codeTabLayout.createSequentialGroup()
                .addGap(300, 300, 300)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 998, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(300, 300, 300))
        );
        codeTabLayout.setVerticalGroup(
            codeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, codeTabLayout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );

        jTabbedPane1.addTab("Generated Code", codeTab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 757, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateKMeansButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateKMeansButtonActionPerformed
        int numClusters = Integer.parseInt(numClustersTextField.getText());
        int numIterations = Integer.parseInt(numIterationsTextField.getText());
        if (!loaded) {
            generatedScalaTextArea.setText("Please select a file");
        }
        else {
            int[] listColumns = columnList.getSelectedIndices();
            if(numClusters <= 0){
                generatedScalaTextArea.append("NUMBER OF CLUSTERS CANNOT BE 0 OR LESS.");
            }
            else if(numIterations <= 0){
                generatedScalaTextArea.append("NUMBER OF ITERATIONS CANNOT BE 0 OR LESS.");
            }
            else{
                String outputFileName = outputFileTextField.getText();
                createFile(listColumns, outputFileName);
                generateKMeansScalaCode(numClusters, numIterations);
            }
        }
    }//GEN-LAST:event_generateKMeansButtonActionPerformed

    private void getColumnsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getColumnsActionPerformed
        int[] listColumns;
        if(!loaded) {
            System.out.println("Please select file.");
        } else {
            listColumns = columnList.getSelectedIndices();
            loadTableColumns(listColumns);
        }
    }//GEN-LAST:event_getColumnsActionPerformed

    private void selectFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFileActionPerformed
        if (!loaded) {
            System.out.println("Please select file.");
        } else {
            String fileName = openedFile.getAbsolutePath();
            percentageTextField.setText("100");
            saveData(fileName);
            loaded = true;
        }
    }//GEN-LAST:event_selectFileActionPerformed

    private void browseFileExplorerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseFileExplorerButtonActionPerformed
        //fileExplorer.addChoosableFileFilter(new FileNameExtensionFilter("CSV Files", "csv"));
        fileExplorer.setAcceptAllFileFilterUsed(false);
        fileExplorer.setFileFilter(new FileNameExtensionFilter("CSV Files", "csv"));

        int returnVal = fileExplorer.showOpenDialog(JTableTut.this);
        //TODO: Verify for only a .csv file
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            openedFile = fileExplorer.getSelectedFile();
            fileNameTextField.setText(openedFile.getAbsolutePath());
            System.out.println("User chose: " + openedFile.getName());
            loaded = true;
        } else {
            System.out.println("User clicked cancelled");
        }
    }//GEN-LAST:event_browseFileExplorerButtonActionPerformed

    private void fileNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileNameTextFieldActionPerformed

    private void selectUnsupervisedCardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectUnsupervisedCardButtonActionPerformed
        
        int itemIndex = unsupervisedComboBox.getSelectedIndex();
        kmeansConfig.setVisible(false); 
        defaultUnsupervisedConfig.setVisible(false); 
        switch(itemIndex) {
            case 0:
                kmeansConfig.setVisible(true);
                break;
            case 1:
                gaussianConfig.setVisible(true);
                break;
            default: 
                defaultUnsupervisedConfig.setVisible(true); 
        }
    }//GEN-LAST:event_selectUnsupervisedCardButtonActionPerformed

    private void selectSupervisedCardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectSupervisedCardButtonActionPerformed
        // TODO add your handling code here:
        int itemIndex = supervisedComboBox.getSelectedIndex();
        defaultSupervisedConfig.setVisible(false);
        decisionTreeConfig.setVisible(false);
         switch(itemIndex) {
            case 0:
                decisionTreeConfig.setVisible(true);
                break;
            case 1:
                naiveBayesConfig.setVisible(true);
                break;
            case 2:
                logisticRegressionConfig.setVisible(true);
            default: 
                defaultUnsupervisedConfig.setVisible(true);
         }
    }//GEN-LAST:event_selectSupervisedCardButtonActionPerformed

    private void generateDecisionTreeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateDecisionTreeButtonActionPerformed
        int numClasses = Integer.parseInt(numClassesTextField.getText());
        String impurity = (String)impurityComboBox.getSelectedItem();
        int maxDepth = Integer.parseInt(maxDepthTextField.getText());
        int maxBins = Integer.parseInt(maxBinsTextField.getText());
        if (!loaded) {
            generatedScalaTextArea.setText("Please select a file");
        }
        else {
            if (numClasses <= 0) {
                generatedScalaTextArea.append("NUMBER OF CLASSES CANNOT BE 0 OR LESS.");
            }
            else if (maxDepth <= 0) {
                generatedScalaTextArea.append("MAX DEPTH CANNOT BE 0 OR LESS.");
            }
            else if (maxBins <= 0) {
                generatedScalaTextArea.append("MAX BIN CANNOT BE 0 OR LESS.");
            }
            else {
                int[] listColumns = columnList.getSelectedIndices();
                String outputFileName = decisionTreeOutputFileText.getText();
                createFile(listColumns, outputFileName);
                generateDecisionTreeScalaCode(numClasses, impurity, maxDepth, maxBins);
            }
        }
        

    }//GEN-LAST:event_generateDecisionTreeButtonActionPerformed

    private void generateBayesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateBayesButtonActionPerformed
       double lambda = Double.parseDouble(lambdaTextField.getText());
       if (!loaded) {
            generatedScalaTextArea.setText("Please select a file");
        }
        else {
           if (lambda <= 0) {
                generatedScalaTextArea.append("LAMBDA VALUE CANNOT BE 0 OR LESS.");
            }
           else {
                int[] listColumns = columnList.getSelectedIndices();
                String outputFileName = bayesOutputFileText.getText();
                createFile(listColumns, outputFileName);
                generateNaiveBayesScalaCode(lambda);
            }
       }
    }//GEN-LAST:event_generateBayesButtonActionPerformed
    private void generateButtonGaussianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonGaussianActionPerformed
        int numClusters = Integer.parseInt(numClustersGaussian.getText());
        if (!loaded) {
            generatedScalaTextArea.setText("Please select a file");
        }
        else if(numClusters <= 0){            
                generatedScalaTextArea.append("NUMBER OF CLUSTERS CANNOT BE 0 OR LESS.");
            }
            else{
                int[] listColumns = columnList.getSelectedIndices();
                String outputFileName = outputFileTextFieldGaussian.getText();
                createFile(listColumns, outputFileName);
                generateGaussianScalaCode(numClusters);
            }
        
    }//GEN-LAST:event_generateButtonGaussianActionPerformed

    private void percentageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_percentageButtonActionPerformed
        double percentage = Double.parseDouble(percentageTextField.getText()); 
        
        if (percentage <= 0 || percentage > 100 ) {
            System.out.println("Percentage cannot be less than 1 or more than 100"); 
        }
        
        else {
            saveData(openedFile.getAbsolutePath());
            Vector<Vector<String>> dataTemp = new Vector<>();
            dataTemp = data; 
            Collections.shuffle(dataTemp);
            percentage = percentage/100; 
            int numList = (int)Math.round(dataTemp.size() * percentage); 
            int count = 0; 
            int removeCount = dataTemp.size() - numList; 
            while (count != removeCount) {
                dataTemp.remove(dataTemp.size() - 1);
                count++; 
            }
            updateRowNums(numList); 
            printColumnData(header, dataTemp);
            data = dataTemp;
        }
    }//GEN-LAST:event_percentageButtonActionPerformed

    private void generateLogisticRegressionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateLogisticRegressionActionPerformed
        int classes = Integer.parseInt(logisticRegressionTextField1.getText());
        int split = Integer.parseInt(logisticRegressionTextField2.getText());
        
        if (!loaded) {
            generatedScalaTextArea.setText("Please select a file"); 
        }
        
        else {
            if (classes <= 0) {
                generatedScalaTextArea.append("NUMBER OF CLASSES CANNOT BE 0 OR LESS.");
            }
            else if (split <= 0) {
                generatedScalaTextArea.append("MAX DEPTH CANNOT BE 0 OR LESS.");
            }
            else {
                int[] listColumns = columnList.getSelectedIndices();
                String outputFileName = logisticRegressionOutputFileText.getText();
                createFile(listColumns, outputFileName);
                generateLogisticRegressionnScalaCode(classes, split);
            }
        }
    }//GEN-LAST:event_generateLogisticRegressionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JTableTut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JTableTut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JTableTut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JTableTut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JTableTut().setVisible(true);
            }
        });
    }
    
    public void updateRowNums(int numRows) {
        rowNums.setText("" + numRows);
        rowNums2.setText("" + numRows); 
        
    }
    
    public void saveData(String fileName) {
        if (loaded == true) {
            header = null;
            data.clear();
            headerVec.clear();
        } 
        
        String[] row = null;
        
        int rowCounter = 0; 
        
        try {
            CSVReader reader = new CSVReader(new FileReader(fileName)); 
            header = reader.readNext();
            
            for (String col: header) {
                headerVec.add(col.toUpperCase());
            }
            
            while((row = reader.readNext()) != null) {
                data.add(new Vector<String>());
                for(int i =0; i < row.length; i++) {
                    data.get(rowCounter).add(row[i]); 
                }
                rowCounter++; 
            }
            reader.close(); 
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(JTableTut.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JTableTut.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        updateRowNums(data.size()); 
        printColumnData(header, data); 
        updateList(header); 
    }
    

    public void printColumnData(String[] header, Vector<Vector<String>> data) {
        csvTable.setModel(new javax.swing.table.DefaultTableModel(
                data,
                headerVec));
        workingTable.setModel(new javax.swing.table.DefaultTableModel(
                data,
                headerVec));
    }    
    public void updateList(String[] header) {
        DefaultListModel model = new DefaultListModel();
        for (String x: header) {
            model.addElement(x.toUpperCase());
        }
        columnList.setModel(model);
    }
    
    
    public void createFile(int[] columnList, String outputFileName) {
        try {
            outputFile = new File(outputFileName + ".txt"); 
            PrintWriter writer = new PrintWriter(outputFile); 
            for (int i = 0; i < data.size(); i++) {
                for (int j = 0; j < columnList.length; j++) {
                    writer.print(data.get(i).get(columnList[j]) + " ");
                }
                writer.write("\n"); 
            }
            writer.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(JTableTut.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    public void loadTableColumns(int[] columnList) {
        printColumnData(header, data);
        int count = 0; 
        while (count < header.length) {
            workingTable.getColumnModel().getColumn(count).setMinWidth(0);
            workingTable.getColumnModel().getColumn(count).setMaxWidth(0);
            workingTable.getColumnModel().getColumn(count).setWidth(0);
            count++;
        }
        for (int i = 0 ; i < columnList.length; i++) {
            workingTable.getColumnModel().getColumn(columnList[i]).setMinWidth(20);
            workingTable.getColumnModel().getColumn(columnList[i]).setMaxWidth(200);
            workingTable.getColumnModel().getColumn(columnList[i]).setWidth(50);
        }
        colNums.setText(columnList.length + "");
    }
    
    
    public void generateKMeansScalaCode(int clu, int ite) {
        String generatedCode; 
        String path = outputFile.getAbsolutePath().replaceAll("\\\\", "/");
        
        generatedCode = "import org.apache.spark.mllib.clustering.{KMeans, KMeansModel}\n" +
                "\nimport org.apache.spark.mllib.linalg.Vectors\n\n" +
                "val data = sc.textFile(\"" + path + "\")\n" +
                "val parsedData = data.map(s => Vectors.dense(s.split(' ').map(_.toDouble))).cache()\n\n" +
                "val numClusters = " + clu + "\n" +
                "val numIterations = " + ite + "\n" +
                "val clusters = KMeans.train(parsedData, numClusters, numIterations)\n\n" +
                "val WSSE = clusters.computeCost(parsedData)\n" +
                "println(\"Within Set Sum of Squared Errors = \" + WSSE)\n";
        
        generatedScalaTextArea.setText(generatedCode); 
    }
    
    public void generateDecisionTreeScalaCode(int x, String imp, int maxD, int maxB){
        String generatedCode; 
        String path = outputFile.getAbsolutePath().replaceAll("\\\\", "/");
        
        generatedCode = "import org.apache.spark.mllib.tree.DecisionTree\n" +
                "import org.apache.spark.mllib.tree.model.DecisionTreeModel\n" +
                "import org.apache.spark.mllib.util.MLUtils\n\n" +
                "val data = MLUtils.loadLibSVMFile(sc, " + path + ")\n" +
                "val splits = data.randomSplit(Array(.07, .03))\n" +
                "val (trainingData, testData) = (splits(0), splits(1))\n\n" +
                "val numClasses = " + x + "\n" +
                "val categoricalFeaturesInfo = Map[Int, Int]()\n" +
                "val impurity = " + imp + "\n" +
                "val maxDepth = " + maxD + "\n" + 
                "val maxBins = " + maxB + "\n\n" +
                "val model = DecisionTree.trainClassifier(trainingData, numClasses, categoricalFeaturesInfo,\n" +
                    "  impurity, maxDepth, maxBins)\n" +
                "val labelAndPreds = testData.map { point =>\n" +
                    "  val prediction = model.predict(point.features)\n" +
                    "  (point.label, prediction)\n" +
                    "}\n" + 
                "val testErr = labelAndPreds.filter(r => r._1 != r._2).count().toDouble / testData.count()\n" +
                "println(\"Test Error = \" + testErr)\n" +
                "println(\"Learned classification tree model:\\n\" + model.toDebugString)\n";
        
        generatedScalaTextArea.setText(generatedCode); 
    }
    
    public void generateNaiveBayesScalaCode(double lambda){
        String generatedCode;
        String path = outputFile.getAbsolutePath().replaceAll("\\\\", "/");
        
        generatedCode = "import org.apache.spark.mllib.classification.{NaiveBayes, NaiveBayesModel}\n" +
                        "import org.apache.spark.mllib.linalg.Vectors\n" +
                        "import org.apache.spark.mllib.regression.LabeledPoint\n" +
                        "\n" +
                        "val data = sc.textFile(\"" + path + "\")\n" +
                        "val parsedData = data.map { line =>\n" +
                        "  val parts = line.split(',')\n" +
                        "  LabeledPoint(parts(0).toDouble, Vectors.dense(parts(1).split(' ').map(_.toDouble)))\n" +
                        "}\n" +
                        "\n" +
                        "val splits = parsedData.randomSplit(Array(0.6, 0.4), seed = 11L)\n" +
                        "val training = splits(0)\n" +
                        "val test = splits(1)\n" +
                        "\n" +
                        "val model = NaiveBayes.train(training, lambda = " + lambda + ", modelType = \"multinomial\")\n" +
                        "\n" +
                        "val predictionAndLabel = test.map(p => (model.predict(p.features), p.label))\n" +
                        "val accuracy = 1.0 * predictionAndLabel.filter(x => x._1 == x._2).count() / test.count()\n";
        generatedScalaTextArea.setText(generatedCode); 
    }
   
    public void generateGaussianScalaCode(int clu){
        String generatedCode;
        String path = outputFile.getAbsolutePath().replaceAll("\\\\", "/");
        
        generatedCode = "import org.apache.spark.mllib.clustering.GaussianMixture\n" +
                        "import org.apache.spark.mllib.clustering.GaussianMixtureModel\n" +
                        "import org.apache.spark.mllib.linalg.Vectors\n" +
                        "val data = sc.textFile(\"" + path + "\")\n" +
                        "val parsedData = data.map(s => Vectors.dense(s.trim.split(' ').map(_.toDouble))).cache()\n" +
                        "val gmm = new GaussianMixture().setK(" + clu + ").run(parsedData)\n" +
                        "for (i <- 0 until gmm.k) {\n" +
                        "println(\"weight=%f\\nmu=%s\\nsigma=\\n%s\\n\" format\n" +
                        "(gmm.weights(i), gmm.gaussians(i).mu, gmm.gaussians(i).sigma))\n" +
                        "}";
        generatedScalaTextArea.setText(generatedCode); 
        
    }   
    
    public void generateLogisticRegressionnScalaCode(int classes, int splits) {
        String generatedCode; 
        String path = outputFile.getAbsolutePath().replaceAll("\\\\", "/");
        
        generatedCode = "import org.apache.spark.SparkContext\n" +
                "import org.apache.spark.mllib.classification.{LogisticRegressionWithLBFGS, LogisticRegressionModel}\n" +
                "import org.apache.spark.mllib.evaluation.MulticlassMetrics\n" +
                "import org.apache.spark.mllib.regression.LabeledPoint\n" +
                "import org.apache.spark.mllib.linalg.Vectors\n" +
                "import org.apache.spark.mllib.util.MLUtils\n\n" +


                "val data = MLUtils.loadLibSVMFile(sc, " + path + ")\n\n" +
                
                
                "val splits = data.randomSplit(Array(0.6, 0.4), seed = 11L)\n" +
                "val training = splits(0).cache()\n" +
                "val test = splits(" + splits + ")\n\n" +
                "val model = new LogisticRegressionWithLBFGS()\n" +
                " .setNumClasses(" + classes + ")\n" +
                " .run(training)\n\n" +
               
                "val predictionAndLabels = test.map { case LabeledPoint(label, features) =>\n" +
                " val prediction = model.predict(features)\n" +
                "   (prediction, label)\n" +
                "}\n\n" +
                
                "val metrics = new MulticlassMetrics(predictionAndLabels)\n" +
                "val precision = metrics.precision\n" +
                "println(\"Precision = \" + precision)\n";
   
        
        generatedScalaTextArea.setText(generatedCode); 
    }
       

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel algorithmTab;
    private javax.swing.JLabel bayesLabel;
    private javax.swing.JLabel bayesLabel1;
    private javax.swing.JTextField bayesOutputFileText;
    private javax.swing.JButton browseFileExplorerButton;
    private javax.swing.JPanel codeTab;
    private javax.swing.JTextField colNums;
    private javax.swing.JList<String> columnList;
    private javax.swing.JTable csvTable;
    private javax.swing.JPanel decisionTreeConfig;
    private javax.swing.JTextField decisionTreeOutputFileText;
    private javax.swing.JPanel defaultSupervisedConfig;
    private javax.swing.JPanel defaultUnsupervisedConfig;
    private javax.swing.JFileChooser fileExplorer;
    private javax.swing.JTextField fileNameTextField;
    private javax.swing.JPanel gaussianConfig;
    private javax.swing.JButton generateBayesButton;
    private javax.swing.JButton generateButtonGaussian;
    private javax.swing.JButton generateDecisionTreeButton;
    private javax.swing.JButton generateKMeansButton;
    private javax.swing.JButton generateLogisticRegression;
    private javax.swing.JTextArea generatedScalaTextArea;
    private javax.swing.JButton getColumns;
    private javax.swing.JComboBox<String> impurityComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelGaussian1;
    private javax.swing.JLabel jLabelGaussian2;
    private javax.swing.JLabel jLabelGaussian3;
    private javax.swing.JLabel jLabelGaussian4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JPanel kmeansConfig;
    private javax.swing.JLabel lambdaLabel;
    private javax.swing.JTextField lambdaTextField;
    private javax.swing.JPanel logisticRegressionConfig;
    private javax.swing.JLabel logisticRegressionLabe1;
    private javax.swing.JLabel logisticRegressionLabe2;
    private javax.swing.JTextField logisticRegressionOutputFileText;
    private javax.swing.JTextField logisticRegressionTextField1;
    private javax.swing.JTextField logisticRegressionTextField2;
    private javax.swing.JTextField maxBinsTextField;
    private javax.swing.JTextField maxDepthTextField;
    private javax.swing.JPanel naiveBayesConfig;
    private javax.swing.JPanel naiveBayesConfig1;
    private javax.swing.JTextField numClassesTextField;
    private javax.swing.JTextField numClustersGaussian;
    private javax.swing.JTextField numClustersTextField;
    private javax.swing.JTextField numIterationsTextField;
    private javax.swing.JTextField outputFileTextField;
    private javax.swing.JTextField outputFileTextFieldGaussian;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JLabel outputLabel1;
    private javax.swing.JButton percentageButton;
    private javax.swing.JTextField percentageTextField;
    private javax.swing.JTextField rowNums;
    private javax.swing.JTextField rowNums2;
    private javax.swing.JButton selectFile;
    private javax.swing.JButton selectSupervisedCardButton;
    private javax.swing.JButton selectUnsupervisedCardButton;
    private javax.swing.JPanel sourceTab;
    private javax.swing.JPanel supervisedCardConfig;
    private javax.swing.JComboBox<String> supervisedComboBox;
    private javax.swing.JPanel supervisedSelector;
    private javax.swing.JPanel supervisedTab;
    private javax.swing.JPanel unsupervisedCardConfig;
    private javax.swing.JComboBox<String> unsupervisedComboBox;
    private javax.swing.JPanel unsupervisedSelector;
    private javax.swing.JPanel unsupervisedTab;
    private javax.swing.JTable workingTable;
    // End of variables declaration//GEN-END:variables
        
}
